////  ScreenshotPreventingView.swift//  Runner////  Created by Sunnatillo Shavkatov on 01/11/24.//import UIKitpublic final class ScreenshotPreventingView: UIView {        public var preventScreenCapture = true {        didSet {            textField.isSecureTextEntry = preventScreenCapture        }    }        private var contentView: UIView?    private let textField = UITextField()        private let recognizer = HiddenContainerRecognizer()    private lazy var hiddenContentContainer: UIView? = try? recognizer.getHiddenContainer(from: textField)        public init(contentView: UIView? = nil) {        self.contentView = contentView        super.init(frame: .zero)                setupUI()    }        required init?(coder aDecoder: NSCoder) {        fatalError("init(coder:) has not been implemented")    }        private func setupUI() {        textField.backgroundColor = .clear        textField.isUserInteractionEnabled = false                guard let container = hiddenContentContainer else { return }                addSubview(container)        container.translatesAutoresizingMaskIntoConstraints = false                NSLayoutConstraint.activate([            container.leadingAnchor.constraint(equalTo: leadingAnchor),            container.trailingAnchor.constraint(equalTo: trailingAnchor),            container.topAnchor.constraint(equalTo: topAnchor),            container.bottomAnchor.constraint(equalTo: bottomAnchor)        ])                guard let contentView = contentView else { return }        setup(contentView: contentView)                DispatchQueue.main.async {            self.preventScreenCapture = true        }    }        public func setup(contentView: UIView) {        self.contentView?.removeFromSuperview()        self.contentView = contentView                guard let container = hiddenContentContainer else { return }                container.addSubview(contentView)        contentView.translatesAutoresizingMaskIntoConstraints = false                let bottomConstraint = contentView.bottomAnchor.constraint(equalTo: container.bottomAnchor)        bottomConstraint.priority = .required - 1                NSLayoutConstraint.activate([            contentView.leadingAnchor.constraint(equalTo: container.leadingAnchor),            contentView.trailingAnchor.constraint(equalTo: container.trailingAnchor),            contentView.topAnchor.constraint(equalTo: container.topAnchor),            bottomConstraint        ])    }}